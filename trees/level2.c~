/*
	AUTHOR	:	VISHAL KUMAR GOURAV
	PROBLEM	:	LEVEL ORDER TRAVERSAL IN TREE
*/
#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
typedef struct node{
	int data;
	struct node *left,*right;
}node;
typedef struct queue{
	node *ele;
	struct queue *next;
}queue;
queue *createQueueNode(node *data){
	queue *q;
	q=(queue*)malloc(sizeof(queue));
	q->ele=data;
	q->next=NULL;
	return q;
}
void enqueue(queue **front,queue **rear,node *data){
	queue *temp=createQueueNode(data);
	if(*front==NULL){
		*front=*rear=temp;
		return;
	}
	(*rear)->next=temp;
	*rear=temp;
}
node *dequeue(queue **front,queue **rear){
	if(NULL==*front)
		return NULL;
	node *data=(*front)->ele;
	queue *temp=*front;
	(*front)=(*front)->next;
	if(NULL==*front)
		*rear=NULL;
	free(temp);
	return data;
}
node *createNode(int data){
	node *temp;
	temp=(node*)malloc(sizeof(node));
	temp->data=data;
	temp->left=temp->right=NULL;
	return temp;
}
node *insert(node *root,int data){
	if(NULL==root)
		return createNode(data);
	if(data<=root->data)
		root->left=insert(root->left,data);
	else
		root->right=insert(root->right,data);
	return root;
}
void inorder(node *root){
	if(NULL==root)
		return;
	inorder(root->left);
	printf("%d ",root->data);
	inorder(root->right);
}
void preorder(node *root){
	if(NULL==root)
		return;
	printf("%d ",root->data);
	preorder(root->left);
	preorder(root->right);
}
void postorder(node *root){
	if(root){
		postorder(root->left);
		postorder(root->right);
		printf("%d ",root->data);
	}
}
void levelOrder(node *root){
	queue *front,*rear;
	front=rear=NULL;	
	node *temp;
	enqueue(&front,&rear,root);
	while(front){
		temp=dequeue(&front,&rear);
		printf("%d ",temp->data);
		if(temp->left)
			enqueue(&front,&rear,temp->left);
		
	}
}
int main(){
	int a[]={20,8,22,4,12,10,14};
	int n=sizeof(a)/sizeof(a[0]);
	int i;
	node *root1=NULL;
	for(i=0;i<n;i++)
		root1=insert(root1,a[i]);
	printf("\nInorder traversal of the tree is:");
	inorder(root1);
	printf("\nLevel order traversal of the tree is:");
	levelOrder(root1);
	printf("\n");
	return 0;
}
